---
# Copyright (c) 2016-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. An additional grant
# of patent rights can be found in the PATENTS file in the same directory.
#

- name: Set Up Git Home.
  shell: echo $HOME/build-ovs/ovs
  register: GIT_HOME

- name: Removing "{{WORK_DIR}}".
  become: yes
  file:
    path: "{{GIT_HOME.stdout}}"
    state: absent

- name: Creating "{{WORK_DIR}}"
  file:
    path: "{{WORK_DIR}}"
    state: directory
    mode: 0755

- name: Install build dependencies.
  become: yes
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - graphviz
      - debhelper
      - dh-autoreconf
      - python-all
      - python-twisted-conch
      - module-assistant
      - openssl
      - pkg-config
      - libssl-dev
      - build-essential
      - libcap-ng-dev
      - git
      - ruby-dev

- name: Ensure correct kernel headers are installed.
  shell: "apt -y install linux-headers-$(uname -r)"
  become: yes

- name: Install FPM
  become: yes
  gem: name=fpm
       user_install=no
       state=present

- name: Cloning the ovs "{{ovs_version}}".
  git:
    repo: https://github.com/openvswitch/ovs.git
    dest: "{{WORK_DIR}}/ovs"
    version: "{{ovs_version}}"

- name: Uploading gtp backport patch to remote.
  synchronize:
    src: "{{ gtp_patch_path }}/gtp-v4.9-backport/"
    dest: "{{WORK_DIR}}/ovs/flow-based-gtp-linux-v4.9"

- name: Uploading gtp patches to remote.
  synchronize:
    src: "{{ gtp_patch_path }}/ovs/{{ ovs_version_short }}/"
    dest: "{{WORK_DIR}}/ovs/"
  with_items:
    - "{{ patches }}"

- name: Patch ovs
  command: git apply "{{ item }}"
  args:
    chdir: "{{ GIT_HOME.stdout }}"
  with_items:
      - "{{ patches }}"

- name: Execute the boot.sh script.
  command: sh boot.sh
  args:
    chdir: "{{ GIT_HOME.stdout }}"

- name: Execute via fakeroot the make debian/rules.
  command:  fakeroot make -f debian/rules DATAPATH_CONFIGURE_OPTS=$DATAPATH_CONFIGURE_OPTS DEB_BUILD_OPTIONS=$DEB_BUILD_OPTIONS binary
  ignore_errors: true
  args:
    chdir: "{{ GIT_HOME.stdout }}"

- name: Creating /usr/src/linux.
  become: yes
  file:
    path: /usr/src/linux
    state: directory
    mode: 0755

- name: Setting up KVERS var.
  shell: uname -r
  register: kvers

- name: Making binaries modules.
  command: make -f debian/rules.modules KSRC="/lib/modules/{{ kvers.stdout }}/build" KVERS={{ kvers.stdout }} binary-modules
  ignore_errors: true
  become: yes
  args:
    chdir: "{{ GIT_HOME.stdout }}"

- name: Find built .deb
  shell: find /usr/src/*.deb
  register: built_packages

- name: Copy freshly built .deb packages
  command: cp {{ item }} {{ GIT_HOME.stdout }}
  with_items:
    - "{{ built_packages.stdout_lines }}"
